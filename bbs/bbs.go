// The bbs package implements Blum-Blum-Shub algorithm.
//
// https://en.wikipedia.org/wiki/Blum_Blum_Shub
package bbs

import "math/big"

// m is the product of two large primes p and q.
var m = new(big.Int).SetBytes([]byte{
	0xec, 0xff, 0x6f, 0x79, 0x31, 0x85, 0xf9, 0xd9, 0xd8, 0x29, 0x21, 0xf0, 0xff, 0x18, 0x59, 0xbe,
	0x23, 0x41, 0x43, 0xb7, 0x76, 0x7c, 0x5b, 0xcc, 0xb9, 0xa1, 0x71, 0x5b, 0xb2, 0xd6, 0xf1, 0x6d,
	0x8a, 0x09, 0xf1, 0x2c, 0x32, 0x92, 0x01, 0x0e, 0x4e, 0x4d, 0xfa, 0x5f, 0xd3, 0x7b, 0x0b, 0x70,
	0x85, 0x35, 0xfd, 0xcb, 0xa1, 0x2e, 0x29, 0x80, 0x3a, 0x75, 0x0e, 0x63, 0x53, 0x3c, 0x59, 0x20,
	0xa4, 0x2d, 0x35, 0x55, 0xe0, 0x7e, 0x47, 0x69, 0xa7, 0x2b, 0x86, 0xb4, 0x6c, 0x04, 0x8a, 0x08,
	0x06, 0xf1, 0x58, 0xf9, 0xd6, 0x73, 0xa1, 0xc5, 0x1d, 0x7a, 0xa1, 0xc8, 0x9e, 0x08, 0xa3, 0x9c,
	0xef, 0x84, 0x95, 0xda, 0x36, 0x4f, 0xb3, 0xa2, 0x78, 0xb2, 0x29, 0xcb, 0x05, 0xd8, 0x54, 0xcc,
	0xb2, 0xac, 0xe9, 0xc3, 0xaf, 0x65, 0x81, 0xed, 0x22, 0xc8, 0x6b, 0x09, 0xb3, 0x56, 0x61, 0xcd,
	0xf5, 0x70, 0xbf, 0x6b, 0x5f, 0xcf, 0x33, 0x3d, 0x9e, 0x96, 0x60, 0x35, 0x6b, 0xdc, 0xa0, 0xb5,
	0xca, 0x4d, 0x9c, 0xed, 0x7f, 0xad, 0x8b, 0x4c, 0x5f, 0x80, 0x82, 0x2d, 0x89, 0x0b, 0xfa, 0x43,
	0x8d, 0xb8, 0x2f, 0x22, 0xa3, 0x83, 0xfb, 0x2e, 0xbe, 0x36, 0x89, 0x54, 0x95, 0x54, 0x42, 0x71,
	0x4c, 0x9e, 0x6f, 0x18, 0x6b, 0x4e, 0xb4, 0x09, 0x21, 0xbb, 0x97, 0x9b, 0x7d, 0x68, 0x9b, 0x86,
	0x46, 0x87, 0xe0, 0xf2, 0x40, 0xe0, 0x5d, 0x53, 0xda, 0x36, 0xe2, 0xf8, 0xc7, 0x51, 0xea, 0x36,
	0xfe, 0x2f, 0xca, 0x16, 0xb2, 0x07, 0xc6, 0xbc, 0x76, 0xfd, 0x44, 0xae, 0x52, 0x55, 0x24, 0x14,
	0xdd, 0x3e, 0xfb, 0x76, 0x4e, 0x3b, 0x8a, 0x62, 0xb4, 0x16, 0x80, 0x07, 0xdc, 0xe0, 0xf9, 0x93,
	0x50, 0xf5, 0xa0, 0xf3, 0x1c, 0x17, 0xe1, 0x44, 0xa5, 0xc4, 0x99, 0x9a, 0x65, 0x2d, 0xa1, 0x14,
	0x5c, 0xc5, 0x91, 0xa4, 0x2e, 0x49, 0x6c, 0xc8, 0x5d, 0xe5, 0x14, 0x8e, 0x5b, 0xb1, 0x54, 0x0b,
	0x6d, 0x9a, 0x53, 0xc7, 0xdf, 0x17, 0xc4, 0x87, 0x72, 0x10, 0xdf, 0x7d, 0xa2, 0x65, 0x6e, 0x11,
	0x35, 0x10, 0x74, 0x87, 0xf5, 0xf9, 0x08, 0x8d, 0x84, 0xdb, 0xb2, 0xa5, 0xf8, 0x8e, 0x50, 0x07,
	0x58, 0xb6, 0xdc, 0xdf, 0x21, 0x90, 0xb9, 0x51, 0x92, 0x99, 0xbf, 0xea, 0xaf, 0xfa, 0x42, 0xaf,
	0x72, 0x21, 0x29, 0xbc, 0x84, 0xf4, 0xa3, 0x2a, 0xc2, 0x36, 0x7a, 0xea, 0xc6, 0x45, 0xb4, 0xdf,
	0xda, 0x18, 0xd0, 0xc6, 0xe6, 0x8e, 0xc4, 0x98, 0x69, 0xc0, 0xee, 0xc4, 0xaf, 0xde, 0x3f, 0x64,
	0xbc, 0xca, 0xc8, 0x3d, 0x64, 0x68, 0x35, 0x7d, 0x47, 0x41, 0xcb, 0xf0, 0xca, 0x57, 0x65, 0x1e,
	0x19, 0x2e, 0x08, 0xaf, 0x67, 0xc2, 0xdc, 0x38, 0xf6, 0xa1, 0xb0, 0xae, 0x57, 0xb0, 0x46, 0x72,
	0xe1, 0x2d, 0x2e, 0xc0, 0x09, 0x02, 0x9c, 0x57, 0x13, 0xec, 0xf1, 0x03, 0x85, 0x27, 0xc3, 0x25,
	0x81, 0xd5, 0xeb, 0x99, 0x2b, 0xcf, 0x6d, 0xe0, 0x5a, 0xba, 0x53, 0xe6, 0xc7, 0x27, 0x84, 0xc1,
	0x73, 0x05, 0xff, 0x62, 0x91, 0x91, 0x45, 0xf7, 0xde, 0xca, 0x90, 0x4f, 0x46, 0x69, 0x15, 0x96,
	0xd1, 0x9e, 0xb0, 0xab, 0x25, 0x6a, 0xd0, 0x47, 0x99, 0x3a, 0x88, 0x8c, 0xaa, 0x1f, 0x37, 0x94,
	0x39, 0x9e, 0xe2, 0xac, 0xde, 0x03, 0xe9, 0xe7, 0xa1, 0x7a, 0xba, 0xbd, 0x1d, 0xea, 0xaf, 0x61,
	0xb3, 0x08, 0x61, 0x73, 0xbf, 0xb6, 0x31, 0x75, 0x7c, 0xe9, 0xa1, 0x96, 0xb5, 0xdf, 0x97, 0x80,
	0x5d, 0x34, 0x14, 0xcc, 0xc1, 0x2a, 0xde, 0x6e, 0xe2, 0xbc, 0xab, 0xd5, 0x44, 0x56, 0xe2, 0x3c,
	0x80, 0x4d, 0xa7, 0x3c, 0xf1, 0x44, 0xa9, 0x96, 0xe8, 0xf4, 0xb8, 0x29, 0x32, 0x6a, 0x09, 0x55,
})

type Source struct {
	x *big.Int
	y *big.Int
	z *big.Int
}

func New(seed int64) *Source {
	a := big.NewInt(seed)
	b := new(big.Int)
	b.SetBit(b, 8192-1, 1)
	a.Add(a, b)
	return &Source{
		x: a,
		y: new(big.Int),
		z: new(big.Int),
	}
}

func (s *Source) Seed(seed int64) {
	a := s.x.SetInt64(seed)
	b := new(big.Int)
	b.SetBit(b, 8192-1, 1)
	a.Add(a, b)
	s.x = a
}

func (s *Source) Bit() uint {
	// x_{n+1} = x_n^2 mod M
	x, y, z := s.x, s.y, s.z
	y.Mul(x, x)
	z.QuoRem(y, m, x)

	return x.Bit(0)
}

func (s *Source) Int63() int64 {
	ret := int64(0)
	for i := 0; i < 63; i++ {
		ret = (ret << 1) + int64(s.Bit())
	}
	return ret
}

func (s *Source) Uint64() uint64 {
	ret := uint64(0)
	for i := 0; i < 64; i++ {
		ret = (ret << 1) + uint64(s.Bit())
	}
	return ret
}
